buildscript {
    ext {
        springBootVersion = '2.1.0.BUILD-SNAPSHOT'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id "java"
    id "com.github.samueltbrown.cucumber" version "0.9"
    id "idea"
    id "eclipse"
    id "war"
    id "jacoco"
}
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.odde'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}


dependencies {
    annotationProcessor("org.projectlombok:lombok:1.18.2")
    compile(
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'org.springframework.boot:spring-boot-starter-mustache',
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-tomcat',
            'org.webjars:bootstrap:4.1.1',
            'org.webjars:jquery:3.3.1-1',
            'mysql:mysql-connector-java',
            "org.projectlombok:lombok:1.18.2"
    )
    runtime('org.springframework.boot:spring-boot-devtools')
    testCompile(
            'org.springframework.boot:spring-boot-starter-test',
            "org.junit.jupiter:junit-jupiter-api:5.3.1",
            "org.mockito:mockito-core:2.+",
            "io.cucumber:cucumber-java:2.+",
            "io.cucumber:cucumber-spring:2.+",
            "org.seleniumhq.selenium:selenium-java",
            "org.assertj:assertj-core",
    )
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.3.1')
    cucumberRuntime "io.cucumber:cucumber-java:2.+"
    providedRuntime "org.springframework.boot:spring-boot-starter-tomcat"
}

def commandLineArg(argName, ifArgPresent) {
    if (project.hasProperty(argName))
        ifArgPresent(project.property(argName))
}

def runInSequence(Task task, String... subTaskNames) {
    task.dependsOn subTaskNames
    [subTaskNames.dropRight(1), subTaskNames.drop(1)].transpose()
            .each { project.tasks.findByName(it[1]).mustRunAfter it[0] }
}

ext {
    commandLineArg = this.&commandLineArg
    runInSequence = this.&runInSequence
}

task ci {
    runInSequence(it, "clean", "check", "cucumber")
}

cucumber {
    jvmOptions {
        environment "SPRING_PROFILES_ACTIVE", "test"
        commandLineArg "port", { port ->
            environment "SERVER_PORT", port
        }
    }
}

test {
    useJUnitPlatform()
    environment "SPRING_PROFILES_ACTIVE", "test"
    jacoco {
        enabled false
    }
}
